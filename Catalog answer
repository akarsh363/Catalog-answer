#include <iostream>
#include <vector>
#include <map>
#include <cmath>

using namespace std;

double lagrange_interpolation(vector<double> x_values, vector<double> y_values, double x) {
    double result = 0.0;
    int n = x_values.size();

    for (int i = 0; i < n; ++i) {
        double l_i = 1.0;
        for (int j = 0; j < n; ++j) {
            if (i != j) {
                l_i *= (x - x_values[j]) / (x_values[i] - x_values[j]);
            }
        }
        result += y_values[i] * l_i;
    }

    return result;
}

double find_constant_term(map<int, map<string, string>> shares) {
    vector<double> x_values;
    vector<double> y_values;

    for (auto& share : shares) {
        x_values.push_back(share.first);
        y_values.push_back(stod(share.second["value"], nullptr));
    }

    return lagrange_interpolation(x_values, y_values, 0.0);
}

int main() {
    map<int, map<string, string>> shares;
    // Read input from JSON file (replace with your JSON parsing logic)
    // ...

    double constant_term = find_constant_term(shares);
    cout << "Constant term: " << constant_term << endl;

    return 0;
}
